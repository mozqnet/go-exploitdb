package fetcher

import (
	"encoding/json"
	"reflect"
	"testing"
	"time"

	"golang.org/x/exp/slices"

	"github.com/vulsio/go-exploitdb/models"
)

func Test_parseDate(t *testing.T) {
	tests := []struct {
		args string
		want time.Time
	}{
		{
			args: "2023-02-22",
			want: time.Date(2023, 2, 22, 0, 0, 0, 0, time.UTC),
		},
		{
			args: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.args, func(t *testing.T) {
			got := parseDate(tt.args)
			if (tt.want == time.Time{}) {
				if got != nil {
					t.Errorf("parseDate() = %v, want nil", got)
				}
				return
			}
			if got == nil || !reflect.DeepEqual(*got, tt.want) {
				t.Errorf("parseDate() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_joinExploits(t *testing.T) {
	type args struct {
		toCVEs      map[string][]string
		toDocument  map[string]models.Document
		toShellCode map[string]models.ShellCode
		toPaper     map[string]models.Paper
		toGHDB      map[string]models.GHDB
	}
	tests := []struct {
		name string
		args args
		want []models.Exploit
	}{
		{
			name: "happy",
			args: args{
				toCVEs: map[string][]string{"0": {"CVE-0000-0000"}},
				toDocument: map[string]models.Document{"1": {Base: models.Base{
					FileURL: "https://gitlab.com/exploit-database/exploitdb/-/blob/main/exploits/1",
					Codes:   "OSVDB-5970;CVE-1999-1015",
				}}},
				toShellCode: map[string]models.ShellCode{"2": {Base: models.Base{
					FileURL: "https://gitlab.com/exploit-database/exploitdb/-/blob/main/shellcodes/2",
					Codes:   "OSVDB-5970",
				}}},
				toPaper: map[string]models.Paper{
					"3": {Base: models.Base{FileURL: "https://gitlab.com/exploit-database/exploitdb-papers/-/blob/main/papers/3.txt"}},
					"4": {Base: models.Base{FileURL: "https://gitlab.com/exploit-database/exploitdb-papers/-/blob/main/docs/4.txt"}},
				},
				toGHDB: map[string]models.GHDB{
					"0": {
						Link: "https://www.exploit-db.com/ghdb/0",
					},
					"1": {
						Link: "https://www.exploit-db.com/ghdb/1",
						Edb:  "1",
					},
				},
			},
			want: []models.Exploit{
				{
					ExploitType:       models.OffensiveSecurityType,
					ExploitUniqueID:   "0",
					URL:               "https://www.exploit-db.com/exploits/0",
					CveID:             "CVE-0000-0000",
					OffensiveSecurity: &models.OffensiveSecurity{},
				},
				{
					ExploitType:     models.OffensiveSecurityType,
					ExploitUniqueID: "1",
					URL:             "https://www.exploit-db.com/exploits/1",
					CveID:           "CVE-1999-1015",
					OffensiveSecurity: &models.OffensiveSecurity{
						Document: &models.Document{
							Base: models.Base{
								FileURL: "https://gitlab.com/exploit-database/exploitdb/-/blob/main/exploits/1",
								Codes:   "OSVDB-5970;CVE-1999-1015",
							},
						},
						GHDB: &models.GHDB{
							Link: "https://www.exploit-db.com/ghdb/1",
							Edb:  "1",
						},
					},
				},
				{
					ExploitType:     models.OffensiveSecurityType,
					ExploitUniqueID: "2",
					URL:             "https://www.exploit-db.com/shellcodes/2",
					OffensiveSecurity: &models.OffensiveSecurity{
						ShellCode: &models.ShellCode{
							Base: models.Base{
								FileURL: "https://gitlab.com/exploit-database/exploitdb/-/blob/main/shellcodes/2",
								Codes:   "OSVDB-5970",
							},
						},
					},
				},
				{
					ExploitType:       models.OffensiveSecurityType,
					ExploitUniqueID:   "3",
					URL:               "https://www.exploit-db.com/papers/3",
					OffensiveSecurity: &models.OffensiveSecurity{Paper: &models.Paper{Base: models.Base{FileURL: "https://gitlab.com/exploit-database/exploitdb-papers/-/blob/main/papers/3.txt"}}},
				},
				{
					ExploitType:       models.OffensiveSecurityType,
					ExploitUniqueID:   "4",
					URL:               "https://www.exploit-db.com/docs/4",
					OffensiveSecurity: &models.OffensiveSecurity{Paper: &models.Paper{Base: models.Base{FileURL: "https://gitlab.com/exploit-database/exploitdb-papers/-/blob/main/docs/4.txt"}}},
				},
				{
					ExploitType:       models.OffensiveSecurityType,
					ExploitUniqueID:   "GHDB-0",
					URL:               "https://www.exploit-db.com/ghdb/0",
					OffensiveSecurity: &models.OffensiveSecurity{GHDB: &models.GHDB{Link: "https://www.exploit-db.com/ghdb/0"}},
				},
				{
					ExploitType:     models.OffensiveSecurityType,
					ExploitUniqueID: "GHDB-1",
					URL:             "https://www.exploit-db.com/ghdb/1",
					OffensiveSecurity: &models.OffensiveSecurity{
						GHDB: &models.GHDB{
							Link: "https://www.exploit-db.com/ghdb/1",
							Edb:  "1",
						},
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := joinExploits(tt.args.toCVEs, tt.args.toDocument, tt.args.toShellCode, tt.args.toPaper, tt.args.toGHDB)
			slices.SortFunc(got, func(i, j models.Exploit) int {
				if i.ExploitUniqueID < j.ExploitUniqueID {
					return -1
				}
				if i.ExploitUniqueID > j.ExploitUniqueID {
					return +1
				}
				return 0
			})
			gotbs, err := json.Marshal(got)
			if err != nil {
				t.Errorf("unmarshal err = %s", err)
			}
			wantbs, err := json.Marshal(tt.want)
			if err != nil {
				t.Errorf("unmarshal err = %s", err)
			}
			if string(gotbs) != string(wantbs) {
				t.Errorf("joinExploits() = %v, want %v", got, tt.want)
			}
		})
	}
}
