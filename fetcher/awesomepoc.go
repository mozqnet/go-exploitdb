package fetcher

import (
	"crypto/md5"
	"fmt"
	"io"
	"path"
	"regexp"
	"strings"

	"github.com/russross/blackfriday/v2"

	"github.com/vulsio/go-exploitdb/models"
	"github.com/vulsio/go-exploitdb/util"
)

var cveIDRegexpSimple = regexp.MustCompile(`^CVE-\d{4}-\d{4,}$`)

// AwesomePoc :
type AwesomePoc struct {
	CveID       string
	Description string
	URL         string
}

// AwesomePocReader :
type AwesomePocReader struct {
	Start bool
	// unique
	AwesomePoc        map[AwesomePoc]struct{}
	FillingAwesomePoc AwesomePoc
}

// RenderNode :
func (r *AwesomePocReader) RenderNode(_ io.Writer, node *blackfriday.Node, _ bool) blackfriday.WalkStatus {
	// start extracting from the text "Resource"
	if string(node.Literal) == "Resource" {
		r.Start = true
		r.AwesomePoc = map[AwesomePoc]struct{}{}
		return 0
	}
	if !r.Start {
		return 0
	}

	emptyAwesomePoc := AwesomePoc{}
	switch node.Type {
	case blackfriday.Text:
		if cveIDRegexpSimple.Match(node.Literal) {
			// change awesome poc
			if r.FillingAwesomePoc != emptyAwesomePoc {
				r.AwesomePoc[r.FillingAwesomePoc] = struct{}{}
			}
			r.FillingAwesomePoc = AwesomePoc{
				CveID: string(node.Literal),
			}
		} else if 0 < len(r.FillingAwesomePoc.CveID) {
			if 0 < len(node.Literal) {
				r.FillingAwesomePoc.Description = string(node.Literal)
			}
		}
	case blackfriday.Link:
		if 0 < len(r.FillingAwesomePoc.CveID) && len(r.FillingAwesomePoc.URL) == 0 {
			if !strings.Contains(string(node.LinkData.Destination), "http") {
				// passed relative path of awesome-cve-poc
				r.FillingAwesomePoc.URL = path.Join("https://github.com/qazbnm456/awesome-cve-poc/blob/master", string(node.LinkData.Destination))
			} else {
				r.FillingAwesomePoc.URL = string(node.LinkData.Destination)
			}
		}
	}
	return 0
}

// RenderHeader :
func (r *AwesomePocReader) RenderHeader(_ io.Writer, _ *blackfriday.Node) {
}

// RenderFooter :
func (r *AwesomePocReader) RenderFooter(_ io.Writer, _ *blackfriday.Node) {
	emptyAwesomePoc := AwesomePoc{}
	if r.FillingAwesomePoc != emptyAwesomePoc {
		r.AwesomePoc[r.FillingAwesomePoc] = struct{}{}
	}
}

// FetchAwesomePoc :
func FetchAwesomePoc() (exploits []models.Exploit, err error) {
	url := "https://raw.githubusercontent.com/qazbnm456/awesome-cve-poc/master/README.md"
	readme, err := util.FetchURL(url)
	if err != nil {
		return nil, err
	}
	r := &AwesomePocReader{}
	blackfriday.Run(readme, blackfriday.WithRenderer(r))

	for poc := range r.AwesomePoc {
		exploit := models.Exploit{
			ExploitType:     models.AwesomePocType,
			ExploitUniqueID: fmt.Sprintf("%s-%x", models.AwesomePocType, md5.Sum([]byte(poc.CveID+poc.URL))),
			URL:             poc.URL,
			Description:     poc.Description,
			CveID:           poc.CveID,
		}
		exploits = append(exploits, exploit)
	}
	return exploits, nil
}
