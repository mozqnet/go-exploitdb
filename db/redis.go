package db

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/go-redis/redis/v8"
	"github.com/inconshreveable/log15"
	"github.com/spf13/viper"
	"github.com/vulsio/go-exploitdb/config"
	"github.com/vulsio/go-exploitdb/models"
	"golang.org/x/xerrors"
)

/**
# Redis Data Structure
- Sets
  ┌───┬──────────────────┬──────────────┬───────────────────────────┐
  │NO │         KEY      │   MEMBER     │            PURPOSE        │
  └───┴──────────────────┴──────────────┴───────────────────────────┘
  ┌───┬──────────────────┬──────────────┬───────────────────────────┐
  │ 1 │ EXPLOIT#C#$CVEID │ $EXPLOITDBID │ TO GET EXPLOIT FROM CVEID │
  └───┴──────────────────┴──────────────┴───────────────────────────┘

- Hash
  ┌───┬────────────────────────┬───────────────┬───────────────┬───────────────────────────────────────────────────┐
  │NO │    KEY                 │   FIELD       │  VALUE        │       PURPOSE                                     │
  └───┴────────────────────────┴───────────────┴───────────────┴───────────────────────────────────────────────────┘
  ┌───┬────────────────────────┬───────────────┬───────────────┬───────────────────────────────────────────────────┐
  │ 1 │ EXPLOIT#E#$EXPLOITDBID │    $CVEID     │ $EXPLOIT JSON │ TO GET EXPLOIT FROM EXPLOITDBID                   │
  ├───┼────────────────────────┼───────────────┼───────────────┼───────────────────────────────────────────────────┤
  │ 2 │ EXPLOIT#DEP            │ $EXPLOITTYPE  │     JSON      │ TO DELETE OUTDATED AND UNNEEDED FIELD AND MEMBER  │
  ├───┼────────────────────────┼───────────────┼───────────────┼───────────────────────────────────────────────────┤
  │ 3 │ EXPLOIT#FETCHMETA      │   Revision    │    string     │ GET GO-EXPLOIT BINARY REVISION                    │
  ├───┼────────────────────────┼───────────────┼───────────────┼───────────────────────────────────────────────────┤
  │ 4 │ EXPLOIT#FETCHMETA      │ SchemaVersion │     uint      │ GET GO-EXPLOIT SCHEMA VERSION                     │
  └───┴────────────────────────┴───────────────┴───────────────┴───────────────────────────────────────────────────┘
**/

const (
	dialectRedis         = "redis"
	depKey               = "EXPLOIT#DEP"
	exploitDBIDKeyFormat = "EXPLOIT#E#%s"
	cveIDKeyFormat       = "EXPLOIT#C#%s"
	fetchMetaKey         = "EXPLOIT#FETCHMETA"
)

// RedisDriver is Driver for Redis
type RedisDriver struct {
	name string
	conn *redis.Client
}

// Name return db name
func (r *RedisDriver) Name() string {
	return r.name
}

// OpenDB opens Database
func (r *RedisDriver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	if err = r.connectRedis(dbPath); err != nil {
		err = fmt.Errorf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
	}
	return
}

// CloseDB close Database
func (r *RedisDriver) CloseDB() (err error) {
	if r.conn == nil {
		return
	}
	if err = r.conn.Close(); err != nil {
		return xerrors.Errorf("Failed to close DB. Type: %s. err: %w", r.name, err)
	}
	return
}

func (r *RedisDriver) connectRedis(dbPath string) error {
	var err error
	var option *redis.Options
	if option, err = redis.ParseURL(dbPath); err != nil {
		log15.Error("Failed to parse url.", "err", err)
		return err
	}
	ctx := context.Background()
	r.conn = redis.NewClient(option)
	err = r.conn.Ping(ctx).Err()
	return err
}

// MigrateDB migrates Database
func (r *RedisDriver) MigrateDB() error {
	return nil
}

// GetExploitByCveID :
func (r *RedisDriver) GetExploitByCveID(cveID string) []models.Exploit {
	ctx := context.Background()

	exploitIDs, err := r.conn.SMembers(ctx, fmt.Sprintf(cveIDKeyFormat, cveID)).Result()
	if err != nil {
		log15.Error("Failed to SMembers.", "err", err)
		return nil
	}

	pipe := r.conn.Pipeline()
	for _, exploitID := range exploitIDs {
		_ = pipe.HGet(ctx, fmt.Sprintf(exploitDBIDKeyFormat, exploitID), cveID)
	}
	cmders, err := pipe.Exec(ctx)
	if err != nil {
		log15.Error("Failed to exec pipeline.", "err", err)
		return nil
	}

	exploits := []models.Exploit{}
	for _, cmder := range cmders {
		str, err := cmder.(*redis.StringCmd).Result()
		if err != nil {
			log15.Error("Failed to HGet.", "err", err)
			return nil
		}

		var exploit models.Exploit
		if err := json.Unmarshal([]byte(str), &exploit); err != nil {
			log15.Error("Failed to Unmarshal json.", "err", err)
			return nil
		}

		exploits = append(exploits, exploit)
	}
	return exploits
}

// GetExploitByID :
func (r *RedisDriver) GetExploitByID(exploitDBID string) []models.Exploit {
	ctx := context.Background()

	result, err := r.conn.HGetAll(ctx, fmt.Sprintf(exploitDBIDKeyFormat, exploitDBID)).Result()
	if err != nil {
		log15.Error("Failed to HGetAll.", "err", err)
		return nil
	}

	exploits := []models.Exploit{}
	for _, str := range result {
		var exploit models.Exploit
		if err := json.Unmarshal([]byte(str), &exploit); err != nil {
			log15.Error("Failed to Unmarshal json.", "err", err)
			return nil
		}

		exploits = append(exploits, exploit)
	}
	return exploits
}

// GetExploitAll :
func (r *RedisDriver) GetExploitAll() []models.Exploit {
	ctx := context.Background()

	exploitDBIDkeys := []string{}
	var cursor uint64
	for {
		var keys []string
		var err error
		keys, cursor, err = r.conn.Scan(ctx, cursor, fmt.Sprintf(exploitDBIDKeyFormat, "*"), 10).Result()
		if err != nil {
			log15.Error("Failed to Scan.", "err", err)
			return nil
		}

		exploitDBIDkeys = append(exploitDBIDkeys, keys...)

		if cursor == 0 {
			break
		}
	}

	pipe := r.conn.Pipeline()
	for _, exploitDBIDKey := range exploitDBIDkeys {
		_ = pipe.HGetAll(ctx, exploitDBIDKey)
	}
	cmders, err := pipe.Exec(ctx)
	if err != nil {
		log15.Error("Failed to exec pipeline.", "err", err)
		return nil
	}

	exploits := []models.Exploit{}
	for _, cmder := range cmders {
		result, err := cmder.(*redis.StringStringMapCmd).Result()
		if err != nil {
			log15.Error("Failed to HGetAll.", "err", err)
			return nil
		}
		for _, str := range result {
			var exploit models.Exploit
			if err := json.Unmarshal([]byte(str), &exploit); err != nil {
				log15.Error("Failed to Unmarshal json.", "err", err)
				return nil
			}

			exploits = append(exploits, exploit)
		}
	}
	return exploits
}

// GetExploitMultiByID :
func (r *RedisDriver) GetExploitMultiByID(exploitUniqueIDs []string) map[string][]models.Exploit {
	exploits := map[string][]models.Exploit{}
	for _, exploitUniqueID := range exploitUniqueIDs {
		exploits[exploitUniqueID] = r.GetExploitByID(exploitUniqueID)
	}
	return exploits
}

// GetExploitMultiByCveID :
func (r *RedisDriver) GetExploitMultiByCveID(cveIDs []string) map[string][]models.Exploit {
	exploits := map[string][]models.Exploit{}
	for _, cveID := range cveIDs {
		exploits[cveID] = r.GetExploitByCveID(cveID)
	}
	return exploits
}

//InsertExploit :
func (r *RedisDriver) InsertExploit(exploitType models.ExploitType, exploits []models.Exploit) (err error) {
	ctx := context.Background()
	expire := viper.GetUint("expire")
	batchSize := viper.GetInt("batch-size")
	if batchSize < 1 {
		return fmt.Errorf("Failed to set batch-size. err: batch-size option is not set properly")
	}

	newDeps := map[string]map[string]struct{}{}
	oldDepsStr, err := r.conn.HGet(ctx, depKey, string(exploitType)).Result()
	if err != nil {
		if !errors.Is(err, redis.Nil) {
			return fmt.Errorf("Failed to Get key: %s. err: %s", depKey, err)
		}
		oldDepsStr = "{}"
	}
	var oldDeps map[string]map[string]struct{}
	if err := json.Unmarshal([]byte(oldDepsStr), &oldDeps); err != nil {
		return fmt.Errorf("Failed to unmarshal JSON. err: %s", err)
	}

	bar := pb.StartNew(len(exploits))
	var noCveIDExploitCount, cveIDExploitCount int
	for idx := range chunkSlice(len(exploits), batchSize) {
		pipe := r.conn.Pipeline()
		for _, exploit := range exploits[idx.From:idx.To] {
			j, err := json.Marshal(exploit)
			if err != nil {
				return fmt.Errorf("Failed to marshal json. err: %s", err)
			}

			exploitDBIDKey := fmt.Sprintf(exploitDBIDKeyFormat, exploit.ExploitUniqueID)
			if err := pipe.HSet(ctx, exploitDBIDKey, exploit.CveID, string(j)).Err(); err != nil {
				return fmt.Errorf("Failed to HSet Exploit. err: %s", err)
			}
			if expire > 0 {
				if err := pipe.Expire(ctx, exploitDBIDKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
					return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
				}
			} else {
				if err := pipe.Persist(ctx, exploitDBIDKey).Err(); err != nil {
					return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
				}
			}

			if _, ok := newDeps[exploit.ExploitUniqueID]; !ok {
				newDeps[exploit.ExploitUniqueID] = map[string]struct{}{}
			}

			if exploit.CveID != "" {
				cveKey := fmt.Sprintf(cveIDKeyFormat, exploit.CveID)
				if err := pipe.SAdd(ctx, cveKey, exploit.ExploitUniqueID).Err(); err != nil {
					return fmt.Errorf("Failed to SAdd CVE. err: %s", err)
				}
				if expire > 0 {
					if err := pipe.Expire(ctx, cveKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
						return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
					}
				} else {
					if err := pipe.Persist(ctx, cveKey).Err(); err != nil {
						return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
					}
				}
				cveIDExploitCount++
			} else {
				noCveIDExploitCount++
			}

			newDeps[exploit.ExploitUniqueID][exploit.CveID] = struct{}{}
			if _, ok := oldDeps[exploit.ExploitUniqueID]; ok {
				delete(oldDeps[exploit.ExploitUniqueID], exploit.CveID)
			}
			if len(oldDeps[exploit.ExploitUniqueID]) == 0 {
				delete(oldDeps, exploit.ExploitUniqueID)
			}
		}
		if _, err = pipe.Exec(ctx); err != nil {
			return fmt.Errorf("Failed to exec pipeline. err: %s", err)
		}
		bar.Add(idx.To - idx.From)
	}
	bar.Finish()

	pipe := r.conn.Pipeline()
	for eid, cves := range oldDeps {
		for cveid := range cves {
			if err := pipe.SRem(ctx, fmt.Sprintf(cveIDKeyFormat, cveid), eid).Err(); err != nil {
				return fmt.Errorf("Failed to SRem. err: %s", err)
			}
			if err := pipe.HDel(ctx, fmt.Sprintf(exploitDBIDKeyFormat, eid), cveid).Err(); err != nil {
				return fmt.Errorf("Failed to HDel. err: %s", err)
			}
		}
	}
	newDepsJSON, err := json.Marshal(newDeps)
	if err != nil {
		return fmt.Errorf("Failed to Marshal JSON. err: %s", err)
	}
	if err := pipe.HSet(ctx, depKey, string(exploitType), string(newDepsJSON)).Err(); err != nil {
		return fmt.Errorf("Failed to Set depkey. err: %s", err)
	}
	if expire > 0 {
		if err := pipe.Expire(ctx, depKey, time.Duration(expire*uint(time.Second))).Err(); err != nil {
			return fmt.Errorf("Failed to set Expire to Key. err: %s", err)
		}
	} else {
		if err := pipe.Persist(ctx, depKey).Err(); err != nil {
			return fmt.Errorf("Failed to remove the existing timeout on Key. err: %s", err)
		}
	}
	if _, err = pipe.Exec(ctx); err != nil {
		return fmt.Errorf("Failed to exec pipeline. err: %s", err)
	}

	log15.Info("No CveID Exploit Count", "count", noCveIDExploitCount)
	log15.Info("CveID Exploit Count", "count", cveIDExploitCount)
	return nil
}

// IsExploitModelV1 determines if the DB was created at the time of go-exploitdb Model v1
func (r *RedisDriver) IsExploitModelV1() (bool, error) {
	ctx := context.Background()

	exists, err := r.conn.Exists(ctx, fetchMetaKey).Result()
	if err != nil {
		return false, fmt.Errorf("Failed to Exists. err: %s", err)
	}
	if exists == 0 {
		keys, _, err := r.conn.Scan(ctx, 0, "EXPLOIT#*", 1).Result()
		if err != nil {
			return false, fmt.Errorf("Failed to Scan. err: %s", err)
		}
		if len(keys) == 0 {
			return false, nil
		}
		return true, nil
	}

	return false, nil
}

// GetFetchMeta get FetchMeta from Database
func (r *RedisDriver) GetFetchMeta() (*models.FetchMeta, error) {
	ctx := context.Background()

	exists, err := r.conn.Exists(ctx, fetchMetaKey).Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to Exists. err: %s", err)
	}
	if exists == 0 {
		return &models.FetchMeta{ExploitRevision: config.Revision, SchemaVersion: models.LatestSchemaVersion}, nil
	}

	revision, err := r.conn.HGet(ctx, fetchMetaKey, "Revision").Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to HGet Revision. err: %s", err)
	}

	verstr, err := r.conn.HGet(ctx, fetchMetaKey, "SchemaVersion").Result()
	if err != nil {
		return nil, fmt.Errorf("Failed to HGet SchemaVersion. err: %s", err)
	}
	version, err := strconv.ParseUint(verstr, 10, 8)
	if err != nil {
		return nil, fmt.Errorf("Failed to ParseUint. err: %s", err)
	}

	return &models.FetchMeta{ExploitRevision: revision, SchemaVersion: uint(version)}, nil
}

// UpsertFetchMeta upsert FetchMeta to Database
func (r *RedisDriver) UpsertFetchMeta(fetchMeta *models.FetchMeta) error {
	return r.conn.HSet(context.Background(), fetchMetaKey, map[string]interface{}{"Revision": fetchMeta.ExploitRevision, "SchemaVersion": fetchMeta.SchemaVersion}).Err()
}
