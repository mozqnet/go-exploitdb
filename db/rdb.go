package db

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/cheggaaa/pb/v3"
	"github.com/inconshreveable/log15"
	sqlite3 "github.com/mattn/go-sqlite3"
	"github.com/vulsio/go-exploitdb/config"
	"github.com/vulsio/go-exploitdb/models"
	"github.com/vulsio/go-exploitdb/util"
	"golang.org/x/xerrors"

	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/logger"
)

const (
	dialectSqlite3    = "sqlite3"
	dialectMysql      = "mysql"
	dialectPostgreSQL = "postgres"
)

// RDBDriver :
type RDBDriver struct {
	name string
	conn *gorm.DB
}

// Name return db name
func (r *RDBDriver) Name() string {
	return r.name
}

// OpenDB opens Database
func (r *RDBDriver) OpenDB(dbType, dbPath string, debugSQL bool) (locked bool, err error) {
	gormConfig := gorm.Config{
		DisableForeignKeyConstraintWhenMigrating: true,
		Logger:                                   logger.Default.LogMode(logger.Silent),
	}

	if debugSQL {
		gormConfig.Logger = logger.New(
			log.New(os.Stdout, "\r\n", log.LstdFlags),
			logger.Config{
				SlowThreshold: time.Second,
				LogLevel:      logger.Info,
				Colorful:      true,
			},
		)
	}

	switch r.name {
	case dialectSqlite3:
		r.conn, err = gorm.Open(sqlite.Open(dbPath), &gormConfig)
	case dialectMysql:
		r.conn, err = gorm.Open(mysql.Open(dbPath), &gormConfig)
	case dialectPostgreSQL:
		r.conn, err = gorm.Open(postgres.Open(dbPath), &gormConfig)
	default:
		err = xerrors.Errorf("Not Supported DB dialects. r.name: %s", r.name)
	}

	if err != nil {
		msg := fmt.Sprintf("Failed to open DB. dbtype: %s, dbpath: %s, err: %s", dbType, dbPath, err)
		if r.name == dialectSqlite3 {
			switch err.(sqlite3.Error).Code {
			case sqlite3.ErrLocked, sqlite3.ErrBusy:
				return true, fmt.Errorf(msg)
			}
		}
		return false, fmt.Errorf(msg)
	}

	if r.name == dialectSqlite3 {
		r.conn.Exec("PRAGMA foreign_keys = ON")
	}
	return false, nil
}

// CloseDB close Database
func (r *RDBDriver) CloseDB() (err error) {
	if r.conn == nil {
		return
	}

	var sqlDB *sql.DB
	if sqlDB, err = r.conn.DB(); err != nil {
		return xerrors.Errorf("Failed to get DB Object. err : %w", err)
	}
	if err = sqlDB.Close(); err != nil {
		return xerrors.Errorf("Failed to close DB. Type: %s. err: %w", r.name, err)
	}
	return
}

// MigrateDB migrates Database
func (r *RDBDriver) MigrateDB() error {
	if err := r.conn.AutoMigrate(
		&models.FetchMeta{},

		&models.Exploit{},
		&models.OffensiveSecurity{},
		&models.Document{},
		&models.ShellCode{},
		&models.GitHubRepository{},
	); err != nil {
		return xerrors.Errorf("Failed to migrate. err: %w", err)
	}

	return nil
}

// InsertExploit :
func (r *RDBDriver) InsertExploit(exploitType models.ExploitType, exploits []models.Exploit) (err error) {
	log15.Info(fmt.Sprintf("Inserting %d Exploits", len(exploits)))
	return r.deleteAndInsertExploit(r.conn, exploitType, exploits)
}

func (r *RDBDriver) deleteAndInsertExploit(conn *gorm.DB, exploitType models.ExploitType, exploits []models.Exploit) (err error) {
	bar := pb.StartNew(len(exploits))
	tx := conn.Begin()
	defer func() {
		if err != nil {
			tx.Rollback()
			return
		}
		tx.Commit()
	}()

	oldIDs := []int64{}
	result := tx.Model(&models.Exploit{}).Select("id").Where("exploit_type = ?", exploitType).Find(&oldIDs)
	if result.Error != nil && !errors.Is(result.Error, gorm.ErrRecordNotFound) {
		return xerrors.Errorf("Failed to select old defs: %w", result.Error)
	}

	if result.RowsAffected > 0 {
		for idx := range chunkSlice(len(oldIDs), 1000) {
			osIDs := []int64{}
			if err := tx.Model(&models.OffensiveSecurity{}).Select("id").Where("exploit_id IN ?", oldIDs[idx.From:idx.To]).Find(&osIDs).Error; err != nil {
				return xerrors.Errorf("Failed to select old OffensiveSecurity: %w", err)
			}
			if err := tx.Select(clause.Associations).Where("id IN ?", osIDs).Delete(&models.OffensiveSecurity{}).Error; err != nil {
				return xerrors.Errorf("Failed to delete: %w", err)
			}

			ghIDs := []int64{}
			if err := tx.Model(&models.GitHubRepository{}).Select("id").Where("exploit_id IN ?", oldIDs[idx.From:idx.To]).Find(&ghIDs).Error; err != nil {
				return xerrors.Errorf("Failed to select old GitHubRepository: %w", err)
			}
			if err := tx.Where("id IN ?", osIDs).Delete(&models.GitHubRepository{}).Error; err != nil {
				return xerrors.Errorf("Failed to delete: %w", err)
			}

			if err := tx.Where("id IN ?", oldIDs[idx.From:idx.To]).Delete(&models.Exploit{}).Error; err != nil {
				return xerrors.Errorf("Failed to delete: %w", err)
			}
		}
	}

	for idx := range chunkSlice(len(exploits), 500) {
		if err = tx.Create(exploits[idx.From:idx.To]).Error; err != nil {
			return fmt.Errorf("Failed to insert. err: %s", err)
		}
		bar.Add(idx.To - idx.From)
	}
	bar.Finish()

	var cveIDExploitCount int
	for _, exploit := range exploits {
		if 0 < len(exploit.CveID) {
			cveIDExploitCount++
		}
	}

	log15.Info("No CveID Exploit Count", "count", len(exploits)-cveIDExploitCount)
	log15.Info("CveID Exploit Count", "count", cveIDExploitCount)
	return nil
}

// GetExploitByID :
func (r *RDBDriver) GetExploitByID(exploitUniqueID string) []models.Exploit {
	es := []models.Exploit{}
	var errs util.Errors
	errs = errs.Add(r.conn.Where(&models.Exploit{ExploitUniqueID: exploitUniqueID}).Find(&es).Error)
	for _, e := range es {
		switch e.ExploitType {
		case models.OffensiveSecurityType:
			errs = errs.Add(r.conn.Preload("Document").Preload("ShellCode").Where(&models.OffensiveSecurity{ExploitUniqueID: e.ExploitUniqueID}).First(&e.OffensiveSecurity).Error)

		case models.GitHubRepositoryType:
			errs = errs.Add(r.conn.Where(&models.GitHubRepository{ExploitUniqueID: e.ExploitUniqueID}).First(&e.GitHubRepository).Error)
		}
	}
	for _, e := range errs.GetErrors() {
		if !errors.Is(e, gorm.ErrRecordNotFound) {
			log15.Error("Failed to get exploit by ExploitDB-ID", "err", e)
		}
	}
	return es
}

// GetExploitAll :
func (r *RDBDriver) GetExploitAll() []models.Exploit {
	es := []models.Exploit{}
	docs := []models.Document{}
	shells := []models.ShellCode{}
	offensiveSecurities := []models.OffensiveSecurity{}
	var errs util.Errors

	errs = errs.Add(r.conn.Find(&es).Error)
	errs = errs.Add(r.conn.Find(&offensiveSecurities).Error)
	errs = errs.Add(r.conn.Find(&docs).Error)
	errs = errs.Add(r.conn.Find(&shells).Error)
	if len(errs.GetErrors()) > 0 {
		log15.Error("Failed to delete old records", "err", errs.Error())
	}

	for _, e := range es {
		for _, o := range offensiveSecurities {
			for _, d := range docs {
				if o.ID == d.OffensiveSecurityID {
					o.Document = d
				}
			}
			for _, s := range shells {
				if o.ID == s.OffensiveSecurityID {
					o.ShellCode = s
				}
			}
			if e.ID == o.ExploitID {
				e.OffensiveSecurity = o
			}
		}
	}
	return es
}

// GetExploitMultiByID :
func (r *RDBDriver) GetExploitMultiByID(exploitUniqueIDs []string) map[string][]models.Exploit {
	exploits := map[string][]models.Exploit{}
	for _, exploitUniqueID := range exploitUniqueIDs {
		exploits[exploitUniqueID] = r.GetExploitByID(exploitUniqueID)
	}
	return exploits
}

// GetExploitByCveID :
func (r *RDBDriver) GetExploitByCveID(cveID string) []models.Exploit {
	es := []models.Exploit{}
	var errs util.Errors
	errs = errs.Add(r.conn.Where(&models.Exploit{CveID: cveID}).Find(&es).Error)
	for _, e := range es {
		switch e.ExploitType {
		case models.OffensiveSecurityType:
			errs = errs.Add(r.conn.Preload("Document").Preload("ShellCode").Where(&models.OffensiveSecurity{ExploitUniqueID: e.ExploitUniqueID}).First(&e.OffensiveSecurity).Error)

		case models.GitHubRepositoryType:
			errs = errs.Add(r.conn.Where(&models.GitHubRepository{ExploitUniqueID: e.ExploitUniqueID}).First(&e.GitHubRepository).Error)
		}
	}
	for _, e := range errs.GetErrors() {
		if !errors.Is(e, gorm.ErrRecordNotFound) {
			log15.Error("Failed to get exploit by CveID", "err", e)
		}
	}
	return es
}

// GetExploitMultiByCveID :
func (r *RDBDriver) GetExploitMultiByCveID(cveIDs []string) (exploits map[string][]models.Exploit) {
	exploits = map[string][]models.Exploit{}
	for _, cveID := range cveIDs {
		exploits[cveID] = r.GetExploitByCveID(cveID)
	}
	return exploits
}

// IndexChunk has a starting point and an ending point for Chunk
type IndexChunk struct {
	From, To int
}

func chunkSlice(length int, chunkSize int) <-chan IndexChunk {
	ch := make(chan IndexChunk)

	go func() {
		defer close(ch)

		for i := 0; i < length; i += chunkSize {
			idx := IndexChunk{i, i + chunkSize}
			if length < idx.To {
				idx.To = length
			}
			ch <- idx
		}
	}()

	return ch
}

// IsGostModelV1 determines if the DB was created at the time of Gost Model v1
func (r *RDBDriver) IsExploitModelV1() (bool, error) {
	if r.conn.Migrator().HasTable(&models.FetchMeta{}) {
		return false, nil
	}

	var (
		count int64
		err   error
	)
	switch r.name {
	case dialectSqlite3:
		err = r.conn.Table("sqlite_master").Where("type = ?", "table").Count(&count).Error
	case dialectMysql:
		err = r.conn.Table("information_schema.tables").Where("table_schema = ?", r.conn.Migrator().CurrentDatabase()).Count(&count).Error
	case dialectPostgreSQL:
		err = r.conn.Table("pg_tables").Where("schemaname = ?", "public").Count(&count).Error
	}

	if count > 0 {
		return true, nil
	}
	return false, err
}

// GetFetchMeta get FetchMeta from Database
func (r *RDBDriver) GetFetchMeta() (fetchMeta *models.FetchMeta, err error) {
	if err = r.conn.Take(&fetchMeta).Error; err != nil {
		if !errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, err
		}
		return &models.FetchMeta{ExploitRevision: config.Revision, SchemaVersion: models.LatestSchemaVersion}, nil
	}

	return fetchMeta, nil
}

// UpsertFetchMeta upsert FetchMeta to Database
func (r *RDBDriver) UpsertFetchMeta(fetchMeta *models.FetchMeta) error {
	fetchMeta.ExploitRevision = config.Revision
	fetchMeta.SchemaVersion = models.LatestSchemaVersion
	return r.conn.Save(fetchMeta).Error
}
